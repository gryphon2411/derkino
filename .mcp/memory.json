{"type":"entity","name":"Simple Dependency Check","entityType":"approach","observations":["Check for required tools at the beginning of the script.","Use simple command checks with `command -v` to verify availability.","If a tool is missing, print a message and exit the script with a non-zero status."]}
{"type":"entity","name":"provision.sh","entityType":"file","observations":["Uses external libraries not typically included in OS installations.","Best practice involves checking for the existence of these libraries before execution.","The common convention in command-line interfaces is to prompt the user to press 'Enter' to continue or exit, as it is more specific and clear than 'any key'.","Using 'Press Enter to exit...' is widely accepted and understood by users, as it indicates that the action is completed and they can proceed by pressing the Enter key."]}
{"type":"entity","name":"simple implementation","entityType":"preference","observations":["User prefers not to overengineer solutions."]}
{"type":"entity","name":"Pause before exit in scripts","entityType":"convention","observations":["Commonly prompts for 'Press Enter to exit...' or 'Press any key to continue...'.","'Press Enter' is more specific and user-friendly for terminal scripts.","'Press any key' is often used in GUI applications or batch scripts."]}
{"type":"entity","name":"Derkino System","entityType":"System","observations":["Microservices-based cinema application demonstrating various technologies within a Kubernetes environment","Follows a polyglot architecture with different services implemented in different technologies","Designed as an educational initiative focused on exploring various technologies within the context of a cinema","Containerization strategy uses multi-stage Docker builds","Configuration management implemented through environment variables","Supports multiple deployment environments (local, dev)","Educational project focused on exploring various technologies within a cinema context","Demonstrates modern cloud-native development practices","Uses polyglot microservices architecture with different technology stacks"]}
{"type":"entity","name":"Derkino Frontend","entityType":"Component","observations":["Built with React/Next.js as the main UI framework","Uses Material UI for component library and styling","Implements Redux for state management","Features responsive web interface for browsing movies","Connects to backend services via REST API","Supports both grid and table views for movie listings"]}
{"type":"entity","name":"Derkino Data Service","entityType":"Service","observations":["Implemented with Spring Boot (Java)","Manages movie title information stored in MongoDB","Provides RESTful API endpoints for retrieving titles","Integrates with Kafka for event streaming","Uses Redis for caching","Connects to RabbitMQ for messaging"]}
{"type":"entity","name":"Derkino Authentication Service","entityType":"Service","observations":["Has multiple implementations in both Spring Boot and Node.js/Express","Handles user authentication and authorization"]}
{"type":"entity","name":"Derkino Trend Service","entityType":"Service","observations":["Implemented with Spring Boot (Java)","Analyzes trends in movie data","Likely integrates with Kafka for real-time analytics"]}
{"type":"entity","name":"Derkino Generative Service","entityType":"Service","observations":["Implemented with Django REST Framework (Python)","Provides AI-powered features using various models","Supports models including Gemini 2 Flash, Gemma, Mixtral 8x7b, and Phi-3"]}
{"type":"entity","name":"Derkino Kubernetes Deployment","entityType":"Infrastructure","observations":["Designed to be deployed on Kubernetes with namespace isolation","Uses StatefulSets for databases and other stateful services","Uses Deployments for stateless services","Employs Services for internal communication between components","Utilizes Ingress for external access to the application","Uses Helm Charts for deploying complex systems like Kafka, RabbitMQ, Prometheus, and Grafana","Employs multi-stage Docker builds for both Java and Node.js applications","Uses Alpine base images to minimize image sizes","Manages configuration through Kubernetes secrets and environment variables","Implements a comprehensive provisioning script that checks dependencies and deploys components selectively","Supports different environments (local/dev) with separate deployment configurations"]}
{"type":"entity","name":"Derkino Data Stores","entityType":"Infrastructure","observations":["MongoDB as primary database for movie titles","PostgreSQL as relational database","Redis Stack for caching and session management"]}
{"type":"entity","name":"Derkino Messaging Systems","entityType":"Infrastructure","observations":["Apache Kafka for event streaming platform","RabbitMQ as message broker"]}
{"type":"entity","name":"Derkino Monitoring","entityType":"Infrastructure","observations":["Prometheus for monitoring and metrics collection","Grafana for visualization platform"]}
{"type":"entity","name":"Frontend Service","entityType":"Service","observations":["Built with React/Next.js and Material UI","Implements responsive design with grid/table views for movie titles","Uses Redux for state management","Supports infinite scrolling in grid view and pagination in table view","Provides search functionality with debounced input handling","Accessible at http://local.derkino.com/","Provides multiple views for browsing movie titles (grid/table)","Implements search functionality with debounced input"]}
{"type":"entity","name":"Authentication Service","entityType":"Service","observations":["Handles user login with username 'user' and password 'password'","Issues session cookies for authenticated requests","Implemented in both Spring Boot/Java and Node.js/Express","Secures application endpoints requiring authentication","Login endpoint at http://local.derkino.com/api/v1/auth/login","Uses session-based authentication with cookies","Test credentials: username=user, password=password"]}
{"type":"entity","name":"Data Service","entityType":"Service","observations":["Implemented in Spring Boot/Java","Manages movie title data stored in MongoDB","Provides REST API endpoints for title retrieval","Supports paginated listing of titles with filtering options","Integrates with Kafka to track title searches for analytics","Uses Redis for caching","Connects to RabbitMQ for messaging","Main API endpoint at http://local.derkino.com/api/v1/data/","Supports retrieving lists of titles with pagination","Supports retrieving individual title details by ID","Tracks search queries by publishing to Kafka"]}
{"type":"entity","name":"Generative Service","entityType":"Service","observations":["Implemented in Django/Python","Integrates with AI models (Gemini, Mixtral, Phi-3) to generate facts about movies","Communicates with other services via RPC","Currently experiencing connectivity issues with RabbitMQ (AMQPConnectionError)","Provides endpoint at /api/v1/generative/title/{id}/facts","Intended to provide AI-generated facts about movies","Currently not functional due to RabbitMQ connection issues","Would integrate with Google Gemini and other AI models"]}
{"type":"entity","name":"Trend Service","entityType":"Service","observations":["Implemented in Spring Boot/Java","Processes Kafka streams to identify trending titles","Provides analytics on popular searches","Endpoint /api/v1/trends/titles?minutes=60 returns 404, suggesting API gateway exposure issues","Intended to provide analytics on trending titles","Consumes Kafka streams for processing","API endpoint currently not accessible through gateway"]}
{"type":"entity","name":"MongoDB","entityType":"Database","observations":["Primary database for movie titles","Contains collections with movie data including title, year, genres, etc.","Supports text indexing for search functionality","Used by the Data Service for CRUD operations on movie titles","Initialized with data from IMDB title.basics.tsv.gz dataset","Text index created on primaryTitle and originalTitle fields with weights (primaryTitle: 2, originalTitle: 1)","Initialization job creates the text index after data insertion","Title documents stored in \"title_basics\" collection","Title class mapped with @Document(\"title_basics\")","primaryTitle and originalTitle fields annotated with @TextIndexed with weights (2 and 1 respectively)"]}
{"type":"entity","name":"Kafka","entityType":"MessageBroker","observations":["Used for event streaming and analytics","Receives title search events from the Data Service","Processed by the Trend Service for analytics","Integrated with Kubernetes deployment"]}
{"type":"entity","name":"RabbitMQ","entityType":"MessageBroker","observations":["Used for inter-service communication","Required by the Generative Service for RPC communication","Currently experiencing connection issues preventing Generative Service from functioning","Integrated with Kubernetes deployment"]}
{"type":"entity","name":"Redis","entityType":"Cache","observations":["Used for caching in the Data Service","Also used for session management","Integrated with Kubernetes deployment"]}
{"type":"entity","name":"GitHub Actions Workflows","entityType":"System","observations":["Workflows are located in .github/workflows directory","Current workflows only execute on master branch commits","Workflows include derkino-auth-service.yaml, derkino-data-service.yaml, derkino-generative-service.yaml, derkino-jobs.yml, derkino-trend-service.yaml, derkino-ui.yaml","Development workflows include dev-derkino-auth-service.yaml, dev-derkino-ui.yaml which run on develop branch"]}
{"type":"entity","name":"Master Branch Limitation","entityType":"Problem","observations":["All production workflows are limited to master branch only","Feature branches do not trigger CI/CD workflows","This limits testing and validation of feature branches"]}
{"type":"entity","name":"Derkino","entityType":"Project","observations":["Microservices-based cinema application","Uses various technologies in a Kubernetes environment","Current branch focuses on free text title search functionality","Codebase structure includes services, orchestrators, jobs, and UIs","Implemented with microservices architecture using Spring Boot, Django, and Node.js","Deployed on Kubernetes with Helm charts for package management","Multi-service architecture with frontend, backend services, data stores, and messaging systems","Includes monitoring with Prometheus and visualization with Grafana","Frontend implemented with React/Next.js","UI located at uis/react-ui/derkino-ui/","Uses Material UI component library","API host URL configurable via NEXT_PUBLIC_API_HOST_URL environment variable","Development ingress routing defined in orchestrators/k8s/dev-gateway-ingress.yaml","UI served at root path \"/\"","Auth service API at \"/api/v1/auth\"","Data service API at \"/api/v1/data\"","Generative service API at \"/api/v1/generative\"","Generative service implemented with Django REST Framework","Uses Hugging Face Hub for AI models","Integrates with RabbitMQ (pika library) for messaging","Requirements listed in services/django-rest-framework/generative_service/requirements.txt"]}
{"type":"entity","name":"DataService","entityType":"Service","observations":["Spring Boot service for movie data","Connects to MongoDB for movie titles","Exposes REST API for title queries","Contains TitleController, TitleService, and TitleRepository","Implements custom MongoDB queries for title search","Integrates with Kafka for event streaming","Implemented with Spring Boot (Java)","Located at services/spring-boot/data_service/","Contains titles package with TitleController, TitleService, and repository implementations","Integrates with Kafka for event streaming when titles are accessed","Configuration in src/main/resources/application.properties","Server port configurable via SERVICE_PORT environment variable","MongoDB connection configured with MONGO_* environment variables","Redis caching configured with REDIS_* environment variables","Kafka integration configured with KAFKA_* environment variables","RabbitMQ integration configured with RABBITMQ_* environment variables"]}
{"type":"entity","name":"FreeTextSearch","entityType":"Feature","observations":["Current implementation uses MongoDB text search","Needs improvement to work with other filters","Located in CustomTitleRepositoryImpl","Current implementation in CustomTitleRepositoryImpl has limitations","Does not properly combine text search with other filters like primaryTitle and genres","Uses MongoDB text search functionality but with inconsistent filter application","REST endpoint accepts freeText parameter in GET /titles","Implementation uses MongoDB TextCriteria and TextQuery when freeText is provided","Issue: primaryTitle regex filter is ignored when freeText is used","Issue: Genres filtering logic is inconsistent with/without freeText"]}
{"type":"entity","name":"mcp_chrome-devtoo_navigate_page","entityType":"Tool","observations":["Chrome DevTools automation tool for navigating to web pages","Used to navigate to https://fast.com/ to perform an internet speed test"]}
{"type":"entity","name":"mcp_chrome-devtoo_take_snapshot","entityType":"Tool","observations":["Chrome DevTools automation tool for capturing page state and UI elements","Used multiple times to capture the current state of the web page and identify UI elements","Used to monitor changes in the speed test results"]}
{"type":"entity","name":"mcp_chrome-devtoo_wait_for","entityType":"Tool","observations":["Chrome DevTools automation tool for waiting for specific text to appear on a page","Used to wait for specific text (Mbps) to appear on the page during the speed test"]}
{"type":"entity","name":"mcp_chrome-devtoo_click","entityType":"Tool","observations":["Chrome DevTools automation tool for clicking on UI elements","Used to click the \"Show more info\" link to reveal additional speed test details"]}
{"type":"entity","name":"mcp_memory_add_observations","entityType":"Tool","observations":["Memory management tool for adding observations to existing entities in the knowledge graph","Used to record observations about the tools used in the current session"]}
{"type":"entity","name":"mcp_chrome-devtoo_close_page","entityType":"Tool","observations":["Chrome DevTools automation tool for closing browser pages"]}
{"type":"entity","name":"mcp_chrome-devtoo_drag","entityType":"Tool","observations":["Chrome DevTools automation tool for dragging elements"]}
{"type":"entity","name":"mcp_chrome-devtoo_emulate_cpu","entityType":"Tool","observations":["Chrome DevTools automation tool for emulating CPU throttling"]}
{"type":"entity","name":"mcp_chrome-devtoo_emulate_network","entityType":"Tool","observations":["Chrome DevTools automation tool for emulating network conditions"]}
{"type":"entity","name":"mcp_chrome-devtoo_evaluate_script","entityType":"Tool","observations":["Chrome DevTools automation tool for evaluating JavaScript functions inside pages"]}
{"type":"entity","name":"mcp_chrome-devtoo_fill","entityType":"Tool","observations":["Chrome DevTools automation tool for filling input fields"]}
{"type":"entity","name":"mcp_chrome-devtoo_fill_form","entityType":"Tool","observations":["Chrome DevTools automation tool for filling multiple form elements at once"]}
{"type":"entity","name":"mcp_chrome-devtoo_get_network_request","entityType":"Tool","observations":["Chrome DevTools automation tool for retrieving network request details"]}
{"type":"entity","name":"mcp_chrome-devtoo_handle_dialog","entityType":"Tool","observations":["Chrome DevTools automation tool for handling browser dialogs"]}
{"type":"entity","name":"mcp_chrome-devtoo_hover","entityType":"Tool","observations":["Chrome DevTools automation tool for hovering over elements"]}
{"type":"entity","name":"mcp_chrome-devtoo_list_console_messages","entityType":"Tool","observations":["Chrome DevTools automation tool for listing console messages"]}
{"type":"entity","name":"mcp_chrome-devtoo_list_network_requests","entityType":"Tool","observations":["Chrome DevTools automation tool for listing network requests"]}
{"type":"entity","name":"mcp_chrome-devtoo_list_pages","entityType":"Tool","observations":["Chrome DevTools automation tool for listing open browser pages"]}
{"type":"entity","name":"mcp_chrome-devtoo_navigate_page_history","entityType":"Tool","observations":["Chrome DevTools automation tool for navigating page history"]}
{"type":"entity","name":"mcp_chrome-devtoo_new_page","entityType":"Tool","observations":["Chrome DevTools automation tool for creating new browser pages"]}
{"type":"entity","name":"mcp_chrome-devtoo_performance_analyze_insight","entityType":"Tool","observations":["Chrome DevTools automation tool for analyzing performance insights"]}
{"type":"entity","name":"mcp_chrome-devtoo_performance_start_trace","entityType":"Tool","observations":["Chrome DevTools automation tool for starting performance trace recordings"]}
{"type":"entity","name":"mcp_chrome-devtoo_performance_stop_trace","entityType":"Tool","observations":["Chrome DevTools automation tool for stopping performance trace recordings"]}
{"type":"entity","name":"mcp_chrome-devtoo_resize_page","entityType":"Tool","observations":["Chrome DevTools automation tool for resizing browser pages"]}
{"type":"entity","name":"mcp_chrome-devtoo_select_page","entityType":"Tool","observations":["Chrome DevTools automation tool for selecting a page as context for future tool calls"]}
{"type":"entity","name":"mcp_chrome-devtoo_take_screenshot","entityType":"Tool","observations":["Chrome DevTools automation tool for taking screenshots of pages or elements"]}
{"type":"entity","name":"mcp_chrome-devtoo_upload_file","entityType":"Tool","observations":["Chrome DevTools automation tool for uploading files through elements"]}
{"type":"entity","name":"mcp_memory_create_entities","entityType":"Tool","observations":["Memory management tool for creating new entities in the knowledge graph"]}
{"type":"entity","name":"mcp_memory_create_relations","entityType":"Tool","observations":["Memory management tool for creating relations between entities in the knowledge graph"]}
{"type":"entity","name":"mcp_memory_delete_entities","entityType":"Tool","observations":["Memory management tool for deleting entities and their relations from the knowledge graph"]}
{"type":"entity","name":"mcp_memory_delete_observations","entityType":"Tool","observations":["Memory management tool for deleting specific observations from entities"]}
{"type":"entity","name":"mcp_memory_delete_relations","entityType":"Tool","observations":["Memory management tool for deleting relations from the knowledge graph"]}
{"type":"entity","name":"mcp_memory_open_nodes","entityType":"Tool","observations":["Memory management tool for opening specific nodes in the knowledge graph by their names"]}
{"type":"entity","name":"mcp_memory_read_graph","entityType":"Tool","observations":["Memory management tool for reading the entire knowledge graph"]}
{"type":"entity","name":"mcp_memory_search_nodes","entityType":"Tool","observations":["Memory management tool for searching nodes in the knowledge graph based on a query"]}
{"type":"entity","name":"Chrome DevTools Automation Suite","entityType":"Tool Suite","observations":["Collection of tools for automating Chrome browser interactions"]}
{"type":"entity","name":"Memory Management Tools","entityType":"Tool Suite","observations":["Collection of tools for managing knowledge graph entities and relations"]}
{"type":"entity","name":"Issue #11","entityType":"GitHub Issue","observations":["Title: Support free text title search","Status: Closed (Completed)","Created: February 26, 2025","Closed: October 4, 2025","Implementation completed on branch 11-support-free-text-title-search","Feature allows searching titles using free text matching on primaryTitle and originalTitle fields","Verified implementation through PR #20","Pull request was merged on October 4, 2025","Implementation includes backend changes for free text search"]}
{"type":"entity","name":"Free Text Search Implementation","entityType":"Feature Implementation","observations":["Added @TextIndexed annotations to Title model","Implemented text search using MongoDB TextCriteria","Updated repository, service, and controller layers","Maintains backward compatibility with existing search parameters","Uses MongoDB text search with weighted fields","Controller endpoint accepts freeText parameter alongside existing search parameters","Special handling for combining text search with genre filtering using regex","PR #20 includes changes to GitHub Actions workflows to trigger on pull requests","PR #20 updates .mcp/memory.json with detailed system documentation","Implementation uses MongoDB text search with TextCriteria and TextQuery"]}
{"type":"entity","name":"Title Model","entityType":"Data Model","observations":["Added @TextIndexed(weight=2) to primaryTitle","Added @TextIndexed(weight=1) to originalTitle","PR #20 shows the exact changes to add @TextIndexed annotations with weights"]}
{"type":"entity","name":"CustomTitleRepositoryImpl","entityType":"Repository Implementation","observations":["Modified buildTitlesQuery to support TextQuery when freeText parameter is provided","Handles combination of text search with other filters appropriately","PR #20 shows implementation of text search using MongoDB TextCriteria","Implementation handles combination of text search with other filters appropriately","Special handling for genre filtering when using text search"]}
{"type":"entity","name":"Free Text Title Search Implementation","entityType":"Feature Implementation","observations":["Implemented UI for free text title search feature in Derkino application","Created GitHub issue #21 to track the implementation work","Developed High-Level Design (HLD) document outlining the overall approach","Created Low-Level Design (LLD) document with technical specifications","HLD placed search input at the top of the Titles page, above view toggle buttons","LLD specified creation of SearchInput component with Material UI TextField and search icon","Defined Redux slice modifications including setFreeText reducer and fetchTitles thunk updates","Added design documents as comments to GitHub issue #21 for team reference","Validated LLD against Material UI and Redux Toolkit best practices","Confirmed design follows existing patterns for API integration and debouncing","Created .github/copilot-instructions.md file with comprehensive project overview and AI coding assistant instructions","Documented frontend architecture with React, Material UI, and Redux Toolkit patterns","Documented backend architecture with Spring Boot services and MongoDB integration","Documented data flow from frontend to backend to Kafka event streaming","Captured key conventions for naming, file organization, and code patterns","Documented developer workflows for running, building, and testing the application","Specified environment configuration for API endpoints and environment variables","Identified common integration points between frontend, backend, and infrastructure","Emphasized the \"just enough\" philosophy for implementation approach"]}
{"type":"relation","from":"provision.sh","to":"kubectl","relationType":"uses"}
{"type":"relation","from":"provision.sh","to":"yq","relationType":"uses"}
{"type":"relation","from":"provision.sh","to":"minikube","relationType":"uses"}
{"type":"relation","from":"provision.sh","to":"helm","relationType":"uses"}
{"type":"relation","from":"provision.sh","to":"jq","relationType":"uses"}
{"type":"relation","from":"provision.sh","to":"external libraries","relationType":"uses"}
{"type":"relation","from":"external libraries","to":"check for installation before execution","relationType":"best practice"}
{"type":"relation","from":"check for installation before execution","to":"if not installed","relationType":"outputs error"}
{"type":"relation","from":"prompt","to":"convention about user input for exiting scripts","relationType":"asks"}
{"type":"relation","from":"prompt","to":"best practices for user prompts in scripts","relationType":"seeks"}
{"type":"relation","from":"Derkino Frontend","to":"Derkino Data Service","relationType":"consumes"}
{"type":"relation","from":"Derkino Data Service","to":"Derkino Data Stores","relationType":"uses"}
{"type":"relation","from":"Derkino Data Service","to":"Derkino Messaging Systems","relationType":"integrates_with"}
{"type":"relation","from":"Derkino Data Service","to":"Derkino Monitoring","relationType":"monitored_by"}
{"type":"relation","from":"Derkino System","to":"Derkino Kubernetes Deployment","relationType":"deployed_on"}
{"type":"relation","from":"Derkino Authentication Service","to":"Derkino Data Stores","relationType":"uses"}
{"type":"relation","from":"Derkino Trend Service","to":"Derkino Data Stores","relationType":"analyzes"}
{"type":"relation","from":"Derkino Trend Service","to":"Derkino Messaging Systems","relationType":"integrates_with"}
{"type":"relation","from":"Derkino Generative Service","to":"Derkino Data Service","relationType":"enhances"}
{"type":"relation","from":"Derkino System","to":"Frontend Service","relationType":"contains"}
{"type":"relation","from":"Derkino System","to":"Authentication Service","relationType":"contains"}
{"type":"relation","from":"Derkino System","to":"Data Service","relationType":"contains"}
{"type":"relation","from":"Derkino System","to":"Generative Service","relationType":"contains"}
{"type":"relation","from":"Derkino System","to":"Trend Service","relationType":"contains"}
{"type":"relation","from":"Derkino System","to":"MongoDB","relationType":"uses"}
{"type":"relation","from":"Derkino System","to":"Kafka","relationType":"uses"}
{"type":"relation","from":"Derkino System","to":"RabbitMQ","relationType":"uses"}
{"type":"relation","from":"Derkino System","to":"Redis","relationType":"uses"}
{"type":"relation","from":"Frontend Service","to":"Authentication Service","relationType":"depends_on"}
{"type":"relation","from":"Frontend Service","to":"Data Service","relationType":"depends_on"}
{"type":"relation","from":"Data Service","to":"MongoDB","relationType":"stores_data_in"}
{"type":"relation","from":"Data Service","to":"Kafka","relationType":"publishes_events_to"}
{"type":"relation","from":"Data Service","to":"Redis","relationType":"caches_data_in"}
{"type":"relation","from":"Data Service","to":"RabbitMQ","relationType":"communicates_via"}
{"type":"relation","from":"Trend Service","to":"Kafka","relationType":"consumes_events_from"}
{"type":"relation","from":"Generative Service","to":"RabbitMQ","relationType":"communicates_via"}
{"type":"relation","from":"DataService","to":"MongoDB","relationType":"uses"}
{"type":"relation","from":"DataService","to":"FreeTextSearch","relationType":"implements"}
{"type":"relation","from":"FreeTextSearch","to":"MongoDB","relationType":"queries"}
{"type":"relation","from":"mcp_chrome-devtoo_navigate_page","to":"Chrome DevTools Automation Suite","relationType":"part of"}
{"type":"relation","from":"mcp_chrome-devtoo_take_snapshot","to":"Chrome DevTools Automation Suite","relationType":"part of"}
{"type":"relation","from":"mcp_chrome-devtoo_wait_for","to":"Chrome DevTools Automation Suite","relationType":"part of"}
{"type":"relation","from":"mcp_chrome-devtoo_click","to":"Chrome DevTools Automation Suite","relationType":"part of"}
{"type":"relation","from":"mcp_memory_add_observations","to":"Memory Management Tools","relationType":"part of"}
{"type":"relation","from":"Issue #11","to":"Free Text Search Implementation","relationType":"implemented"}
{"type":"relation","from":"Free Text Search Implementation","to":"Title Model","relationType":"modified"}
{"type":"relation","from":"Free Text Search Implementation","to":"CustomTitleRepositoryImpl","relationType":"modified"}
{"type":"relation","from":"Free Text Title Search Implementation","to":"GitHub Issue #21","relationType":"documents"}